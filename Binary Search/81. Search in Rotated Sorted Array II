class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int n = nums.size();
        int start = 0, end = n - 1;

        while (start <= end) {
            int mid = start + (end - start) / 2;

            // Check if mid is the target
            if (nums[mid] == target) {
                return true;
            }

            // Handle duplicates
            if (nums[start] == nums[mid] && nums[mid] == nums[end]) {
                start++;
                end--;
                continue;
            }

            // If left part is sorted
            if (nums[start] <= nums[mid]) {
                if (nums[start] <= target && target < nums[mid]) {
                    end = mid - 1; // Target lies in the left part
                } else {
                    start = mid + 1; // Target lies in the right part
                }
            }
            // If right part is sorted
            else {
                if (nums[mid] < target && target <= nums[end]) {
                    start = mid + 1; // Target lies in the right part
                } else {
                    end = mid - 1; // Target lies in the left part
                }
            }
        }
        return false; // Target not found
    }
};
